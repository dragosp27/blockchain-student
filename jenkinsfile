pipeline {
    agent {
        docker {
            image 'dragospetre2707/blockchain-laboratory:0.1'
            args '-u root --privileged'
        }
    }

    stages {
        env.succes = 0

        stage('Observers') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    script {
                        echo 'Observers'
                        sh 'exit 1'
                    }
                }
            }
        }

        stage('Wallet') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    script {
                        echo 'Wallet'
                        sh 'exit 1'
                    }
                }
            }
        }

        stage('First Transaction') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    script {
                        echo 'First Transaction'
                        sh 'exit 1'
                    }
                }
            }
        }

        stage('Create ESDT Token') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    script {
                        echo 'Create ESDT Token'
                        sh 'exit 1'
                    }
                }
            }
        }

        stage('Send Tokens') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    script {
                        echo 'Send Tokens'
                        sh 'exit 1'
                    }
                }
            }
        }

        stage('Swap Tokens') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    script {
                        echo 'Swap Tokens'
                        sh 'exit 1'
                    }
                }
            }
        }

        stage('Peer-to-Peer') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    script {
                        echo 'Peer-to-Peer'
                        sh 'exit 1'
                    }
                }
            }
        }

        stage('Deploy Smart Contract') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    script {
                        echo 'Deploy Smart Contract'
                        sh 'exit 1'
                    }
                }
            }
        }

        stage('Call Smart Contract') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    script {
                        sh '''
                            export PROXY=$(cat variables | grep PROXY | cut -d "=" -f2)
                            export SC_ADDRESS=$(cat variables | grep SC_ADDRESS | cut -d "=" -f2)
                            mxpy --verbose contract query $SC_ADDRESS --function="getSum" --proxy=$PROXY
                        '''
                        env.succes = env.succes + 1
                    }
                }
            }
        }

        stage('Create Fungible Token') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    script {
                        echo 'Create Fungible Token'
                        sh 'exit 1'
                    }
                }
            }
        }

        stage('Create NFT') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    script {
                        echo 'Create NFT'
                        sh 'exit 1'
                    }
                }
            }
        }
    }

    post {
        always {
            currentBuild.description = env.succes.toString() + "/11\n"
        }
    }
}